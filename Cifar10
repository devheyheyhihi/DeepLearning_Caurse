{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Cifar10","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"id":"GeBrldjo4JTv","colab_type":"code","outputId":"7f1ff8fc-605f-4776-cd9d-429662f4bffa","executionInfo":{"status":"ok","timestamp":1578018494623,"user_tz":-540,"elapsed":1976,"user":{"displayName":"h i","photoUrl":"","userId":"10569797021359250176"}},"colab":{"base_uri":"https://localhost:8080/","height":81}},"source":["import tensorflow as tf\n","import numpy as np"],"execution_count":0,"outputs":[{"output_type":"display_data","data":{"text/html":["<p style=\"color: red;\">\n","The default version of TensorFlow in Colab will soon switch to TensorFlow 2.x.<br>\n","We recommend you <a href=\"https://www.tensorflow.org/guide/migrate\" target=\"_blank\">upgrade</a> now \n","or ensure your notebook will continue to use TensorFlow 1.x via the <code>%tensorflow_version 1.x</code> magic:\n","<a href=\"https://colab.research.google.com/notebooks/tensorflow_version.ipynb\" target=\"_blank\">more info</a>.</p>\n"],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"mwV9A-l34SuD","colab_type":"code","colab":{}},"source":["from tensorflow.keras.datasets.cifar10 import load_data"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"yZOwINutJnpp","colab_type":"code","colab":{}},"source":["train_epochs = 10000\n","batch_size = 128\n","display_step = 100\n","test_epochs = 10\n","test_batch_size = 1000"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"oDbK6sSE4dN0","colab_type":"code","colab":{}},"source":["#랜덤형태로 셔플 후 가져옴\n","def next_batch(num, data, labels):\n","  ''''num' 갯수만큼 랜덤하게 샘플 이미지와 레이블을 리턴합니다.'''\n","  idx = np.arange(0, len(data))\n","  np.random.shuffle(idx)\n","  idx=idx[:num]\n","  data_shuffle = [data[i] for i in idx]   #이미지 데이터\n","  labels_shuffle = [labels[i] for i in idx] #레이블 데이터\n","  return np.asarray(data_shuffle), np.asarray(labels_shuffle)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"LUV8kmGH5qc_","colab_type":"code","colab":{}},"source":["def build_CNN_classifier(x):\n","  x_image = x\n","\n","  #1st convolution layer\n","  #64filter 5x5x3\n","  #32x32x3 --> 32x32x64\n","  W_conv1 = tf.Variable(tf.truncated_normal(shape=[5,5,3,64], stddev=5e-2)) #웨이트값 5*5\n","  b_conv1 = tf.Variable(tf.constant(0.1, shape=[64]))\n","  h_conv1 = tf.nn.relu(tf.nn.conv2d(x_image, W_conv1, strides=[1,1,1,1], padding=\"SAME\")+b_conv1)\n","  \n","  #1st pooling layer\n","  h_pool1 = tf.nn.max_pool(h_conv1, ksize=[1,3,3,1], strides=[1,2,2,1], padding=\"SAME\")\n","\n","  #2nd convolution layer\n","  #64 filter 5x5\n","  W_conv2 = tf.Variable(tf.truncated_normal(shape=[5,5,64,64], stddev=5e-2))\n","  b_conv2 = tf.Variable(tf.constant(0.1, shape=[64]))\n","  h_conv2 = tf.nn.relu(tf.nn.conv2d(h_pool1, W_conv2, strides=[1,1,1,1], padding=\"SAME\")+b_conv2)\n","  \n","  #2nd pooling layer\n","  h_pool2 = tf.nn.max_pool(h_conv2, ksize=[1,3,3,1], strides=[1,2,2,1], padding=\"SAME\")\n","\n","  #3rd convolution layer\n","  #128 filter 3x3\n","  W_conv3 = tf.Variable(tf.truncated_normal(shape=[3,3,64,128], stddev=5e-2))\n","  b_conv3 = tf.Variable(tf.constant(0.1, shape=[128]))\n","  h_conv3 = tf.nn.relu(tf.nn.conv2d(h_pool2, W_conv3, strides=[1,1,1,1], padding=\"SAME\")+b_conv3)\n","  \n","  #4rd convolution layer\n","  #128 filter 3x3\n","  W_conv4 = tf.Variable(tf.truncated_normal(shape=[3,3,128,128], stddev=5e-2))\n","  b_conv4 = tf.Variable(tf.constant(0.1, shape=[128]))\n","  h_conv4 = tf.nn.relu(tf.nn.conv2d(h_conv3, W_conv4, strides=[1,1,1,1], padding=\"SAME\")+b_conv4)\n","  \n","  #5th convolution layer\n","  #128 filter 3x3\n","  W_conv5 = tf.Variable(tf.truncated_normal(shape=[3,3,128,128], stddev=5e-2))\n","  b_conv5 = tf.Variable(tf.constant(0.1, shape=[128]))\n","  h_conv5 = tf.nn.relu(tf.nn.conv2d(h_conv4, W_conv5, strides=[1,1,1,1], padding=\"SAME\")+b_conv5)  \n","\n","  #Fully connected layer1\n","  #32x32 -> 8x8x128 feature map -> 384 feature map\n","  W_fc1 = tf.Variable(tf.truncated_normal(shape=[8*8*128,384], stddev=5e-2))\n","  b_fc1 = tf.Variable(tf.constant(0.1, shape=[384]))\n","\n","  h_conv5_flat = tf.reshape(h_conv5, [-1, 8*8*128])\n","  h_fc1 = tf.nn.relu(tf.matmul(h_conv5_flat,W_fc1)+b_fc1)\n","  \n","  #dropout\n","  h_fc1_drop = tf.nn.dropout(h_fc1, keep_prob)\n","\n","  #Fully connected layer2\n","  W_fc2 = tf.Variable(tf.truncated_normal(shape=[384,10], stddev=5e-2))\n","  b_fc2 = tf.Variable(tf.constant(0.1, shape=[10]))\n","\n","  logits = tf.matmul(h_fc1_drop, W_fc2)+b_fc2\n","\n","  #softmax\n","  y_pred = tf.nn.softmax(logits)\n","\n","  return y_pred,logits"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"M6K0LUC2GKSc","colab_type":"code","colab":{}},"source":["x = tf.placeholder(tf.float32, shape=[None, 32,32,3])\n","y = tf.placeholder(tf.float32, shape=[None, 10])\n","keep_prob = tf.placeholder(tf.float32)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"XtefbulmGXfF","colab_type":"code","colab":{}},"source":["#load_data를 실행하면서 다운로드가 진행된다.\n","(x_train,y_train),(x_test,y_test) = load_data()\n","#scalar 레이블을 one_hot encoding으로 변환\n","y_train_one_hot = tf.squeeze(tf.one_hot(y_train, 10), axis=1)\n","y_test_one_hot = tf.squeeze(tf.one_hot(y_test, 10), axis=1)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"BHnGWzpgHY8i","colab_type":"code","outputId":"3aa6e01e-0f3a-4e67-95db-de5b541dba5c","executionInfo":{"status":"ok","timestamp":1578018495426,"user_tz":-540,"elapsed":2718,"user":{"displayName":"h i","photoUrl":"","userId":"10569797021359250176"}},"colab":{"base_uri":"https://localhost:8080/","height":89}},"source":["y_pred, logits = build_CNN_classifier(x)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["WARNING:tensorflow:From <ipython-input-5-6966c7879f9a>:50: calling dropout (from tensorflow.python.ops.nn_ops) with keep_prob is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Please use `rate` instead of `keep_prob`. Rate should be set to `rate = 1 - keep_prob`.\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"etz0GqkPHyHQ","colab_type":"code","outputId":"6e9354ce-e828-482f-c02f-97c9941c6b48","executionInfo":{"status":"ok","timestamp":1578018495656,"user_tz":-540,"elapsed":2940,"user":{"displayName":"h i","photoUrl":"","userId":"10569797021359250176"}},"colab":{"base_uri":"https://localhost:8080/","height":89}},"source":["loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits_v2(labels=y, logits=logits))\n","train_step = tf.train.RMSPropOptimizer(1e-3).minimize(loss)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/tensorflow_core/python/training/rmsprop.py:119: calling Ones.__init__ (from tensorflow.python.ops.init_ops) with dtype is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Call initializer instance with the dtype argument instead of passing it to the constructor\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"dKELUdwdJB2s","colab_type":"code","colab":{}},"source":["correct_prediction = tf.equal(tf.argmax(y_pred, 1),tf.argmax(y,1))\n","accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"QUA_3oGQJWBJ","colab_type":"code","outputId":"5ed3d7d2-14ee-4b46-ef19-05398f51b0a2","executionInfo":{"status":"ok","timestamp":1578018947067,"user_tz":-540,"elapsed":125135,"user":{"displayName":"h i","photoUrl":"","userId":"10569797021359250176"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["with tf.Session() as sess:\n","  sess.run(tf.global_variables_initializer())\n","  # training & accuracy display\n","  for i in range(train_epochs):\n","    batch_x, batch_y = next_batch(batch_size, x_train, y_train_one_hot.eval())\n","\n","    #display_step 마다 loss값 출력한다.\n","    if i%100==0:\n","      train_accuracy=accuracy.eval(feed_dict={x:batch_x, y:batch_y, keep_prob:1.0})\n","      loss_print=loss.eval(feed_dict={x:batch_x, y:batch_y, keep_prob:1.0})\n","      print(\"epoch:%d,accuracy:%f, loss:%f\" %(i, train_accuracy, loss_print))\n","    sess.run(train_step, feed_dict={x:batch_x, y:batch_y, keep_prob:0.8})\n","\n","  # test\n","  test_accuracy = 0.0\n","  for i in range(test_epochs):\n","    test_batch_x, test_batch_y = next_batch(test_batch_size, x_test, y_test_one_hot.eval())\n","    test_accuracy=test_accuracy + accuracy.eval(feed_dict={x:test_batch_x, y:test_batch_y, keep_prob:1.0})\n","    test_accuracy=test_accuracy / test_epochs\n","    print(\"test accuracy : %f\" %test_accuracy)\n"],"execution_count":0,"outputs":[{"output_type":"stream","text":["epoch:0,accuracy:0.085938, loss:185.363525\n","epoch:100,accuracy:0.203125, loss:2.232572\n","epoch:200,accuracy:0.351562, loss:1.821611\n","epoch:300,accuracy:0.445312, loss:1.603954\n","epoch:400,accuracy:0.375000, loss:1.730413\n","epoch:500,accuracy:0.515625, loss:1.342057\n","epoch:600,accuracy:0.492188, loss:1.343943\n","epoch:700,accuracy:0.578125, loss:1.239945\n","epoch:800,accuracy:0.546875, loss:1.224963\n","epoch:900,accuracy:0.601562, loss:1.208559\n","epoch:1000,accuracy:0.578125, loss:1.171174\n","epoch:1100,accuracy:0.671875, loss:1.060032\n","epoch:1200,accuracy:0.632812, loss:1.041526\n","epoch:1300,accuracy:0.671875, loss:0.960173\n","epoch:1400,accuracy:0.570312, loss:1.122121\n","epoch:1500,accuracy:0.625000, loss:1.258460\n","epoch:1600,accuracy:0.609375, loss:1.158613\n","epoch:1700,accuracy:0.617188, loss:1.066869\n","epoch:1800,accuracy:0.726562, loss:0.931881\n","epoch:1900,accuracy:0.671875, loss:0.857795\n","epoch:2000,accuracy:0.593750, loss:1.169757\n","epoch:2100,accuracy:0.585938, loss:1.118660\n","epoch:2200,accuracy:0.625000, loss:1.143918\n","epoch:2300,accuracy:0.625000, loss:0.983501\n","epoch:2400,accuracy:0.765625, loss:0.775358\n","epoch:2500,accuracy:0.726562, loss:0.791402\n","epoch:2600,accuracy:0.710938, loss:0.884712\n","epoch:2700,accuracy:0.648438, loss:0.852585\n","epoch:2800,accuracy:0.671875, loss:0.986643\n","epoch:2900,accuracy:0.632812, loss:1.047089\n","epoch:3000,accuracy:0.632812, loss:1.049412\n","epoch:3100,accuracy:0.656250, loss:0.988696\n","epoch:3200,accuracy:0.687500, loss:0.903606\n","epoch:3300,accuracy:0.671875, loss:0.822516\n","epoch:3400,accuracy:0.703125, loss:0.790108\n","epoch:3500,accuracy:0.640625, loss:0.849101\n","epoch:3600,accuracy:0.679688, loss:0.877196\n","epoch:3700,accuracy:0.664062, loss:0.989067\n","epoch:3800,accuracy:0.726562, loss:0.794675\n","epoch:3900,accuracy:0.742188, loss:0.762205\n","epoch:4000,accuracy:0.648438, loss:0.887842\n","epoch:4100,accuracy:0.648438, loss:0.941478\n","epoch:4200,accuracy:0.710938, loss:0.866904\n","epoch:4300,accuracy:0.632812, loss:1.165735\n","epoch:4400,accuracy:0.726562, loss:0.976928\n","epoch:4500,accuracy:0.656250, loss:1.023072\n","epoch:4600,accuracy:0.742188, loss:0.865439\n","epoch:4700,accuracy:0.789062, loss:0.700909\n","epoch:4800,accuracy:0.773438, loss:0.768380\n","epoch:4900,accuracy:0.632812, loss:1.168444\n","epoch:5000,accuracy:0.695312, loss:0.984096\n","epoch:5100,accuracy:0.726562, loss:0.822314\n","epoch:5200,accuracy:0.648438, loss:0.943028\n","epoch:5300,accuracy:0.734375, loss:0.806906\n","epoch:5400,accuracy:0.695312, loss:0.825910\n","epoch:5500,accuracy:0.734375, loss:0.922136\n","epoch:5600,accuracy:0.625000, loss:1.012876\n","epoch:5700,accuracy:0.710938, loss:0.846954\n","epoch:5800,accuracy:0.789062, loss:0.742837\n","epoch:5900,accuracy:0.625000, loss:1.004033\n","epoch:6000,accuracy:0.687500, loss:0.842908\n","epoch:6100,accuracy:0.679688, loss:1.076276\n","epoch:6200,accuracy:0.640625, loss:0.997298\n","epoch:6300,accuracy:0.656250, loss:1.006326\n","epoch:6400,accuracy:0.640625, loss:1.195100\n","epoch:6500,accuracy:0.656250, loss:0.896173\n","epoch:6600,accuracy:0.546875, loss:1.223161\n","epoch:6700,accuracy:0.695312, loss:0.820623\n","epoch:6800,accuracy:0.781250, loss:0.644121\n","epoch:6900,accuracy:0.625000, loss:0.949522\n","epoch:7000,accuracy:0.664062, loss:1.210556\n","epoch:7100,accuracy:0.718750, loss:0.857730\n","epoch:7200,accuracy:0.640625, loss:0.874489\n","epoch:7300,accuracy:0.742188, loss:0.779501\n","epoch:7400,accuracy:0.726562, loss:0.955701\n","epoch:7500,accuracy:0.695312, loss:0.784277\n","epoch:7600,accuracy:0.562500, loss:1.258143\n","epoch:7700,accuracy:0.640625, loss:1.076918\n","epoch:7800,accuracy:0.640625, loss:1.239740\n","epoch:7900,accuracy:0.539062, loss:1.348893\n","epoch:8000,accuracy:0.695312, loss:0.917084\n","epoch:8100,accuracy:0.757812, loss:0.758371\n","epoch:8200,accuracy:0.679688, loss:1.070718\n","epoch:8300,accuracy:0.750000, loss:0.719048\n","epoch:8400,accuracy:0.671875, loss:1.013413\n","epoch:8500,accuracy:0.734375, loss:0.813478\n","epoch:8600,accuracy:0.781250, loss:0.568210\n","epoch:8700,accuracy:0.648438, loss:0.986253\n","epoch:8800,accuracy:0.617188, loss:1.091215\n","epoch:8900,accuracy:0.671875, loss:1.000858\n","epoch:9000,accuracy:0.695312, loss:1.006536\n","epoch:9100,accuracy:0.718750, loss:1.128878\n","epoch:9200,accuracy:0.593750, loss:1.008605\n","epoch:9300,accuracy:0.687500, loss:0.897656\n","epoch:9400,accuracy:0.679688, loss:0.877997\n","epoch:9500,accuracy:0.609375, loss:1.067817\n","epoch:9600,accuracy:0.632812, loss:1.141301\n","epoch:9700,accuracy:0.648438, loss:1.420394\n","epoch:9800,accuracy:0.640625, loss:0.981077\n","epoch:9900,accuracy:0.656250, loss:0.947614\n","test accuracy : 0.065100\n","test accuracy : 0.070410\n","test accuracy : 0.070941\n","test accuracy : 0.071494\n","test accuracy : 0.072449\n","test accuracy : 0.072645\n","test accuracy : 0.070664\n","test accuracy : 0.071866\n","test accuracy : 0.070187\n","test accuracy : 0.071319\n"],"name":"stdout"}]}]}